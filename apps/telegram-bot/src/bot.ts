import 'dotenv/config';
import Telegraf, { ContextMessageUpdate } from 'telegraf';
import FindSongs from './find-songs';

export default class Bot {
  telegraf: Telegraf<ContextMessageUpdate>
  telegramBotToken: string

  constructor(telegramBotToken: string) {
    this.telegramBotToken = telegramBotToken
    this.telegraf = new Telegraf(this.telegramBotToken);
  }

  /* Bot start command */
  private start(ctx: ContextMessageUpdate) {
    ctx.reply(
      'üëã –ü—Ä–∏–≤–µ—Ç!\n\n–ü–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –∞–ª—å–±–æ–º –∏–∑ –ª—é–±–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ —è –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫–∏, –Ω–∞ –≤—Å–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∞–ª—å–±–æ–º –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.',
    );
  }

  /* Listen messages */
  private async onMessage(ctx: ContextMessageUpdate) {
    const songs = new FindSongs(ctx)
    songs.sendMessage()
  }

  /* Error handling */
  private catch(err: any): void {
    console.error(`Error: ${err}`);
  };

  /* Launch bot */
  public launch() {
    this.telegraf.catch(this.catch)
    this.telegraf.start(this.start)
    this.telegraf.on('message', this.onMessage);
    this.telegraf.launch();
  }
}
